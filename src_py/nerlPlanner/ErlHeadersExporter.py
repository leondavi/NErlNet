import argparse
import os
from ErlHeadersExporterDefs import *
from JsonDistributedConfigDefs import *
from JsonElementWorkerDefinitions import *
from Definitions import VERSION as NERLPLANNER_VERSION

EMPTY_LINE = '\n'
DEBUG = False

def gen_erlang_exporter_logger(message : str):
    if DEBUG:
        print(f'[NERLPLANNER][AUTO_HEADER_GENERATOR][DEBUG] {message}')

def path_validator(path : str):
    if os.path.dirname(path):
        os.makedirs(os.path.dirname(path), exist_ok=True)

def gen_worker_fields_hrl(header_path : str, debug : bool = False):
    global DEBUG
    DEBUG = debug

    auto_generated_header = AutoGeneratedHeader()
    gen_erlang_exporter_logger(auto_generated_header.generate_code())

    nerlplanner_version = Comment(f'Worker Fields Generated by Nerlplanner version: {NERLPLANNER_VERSION}')
    gen_erlang_exporter_logger(nerlplanner_version.generate_code())

    fields_list_vals = [KEY_MODEL_TYPE, KEY_LAYER_SIZES_LIST,
                   KEY_LAYER_TYPES_LIST, KEY_LAYERS_FUNCTIONS,
                   KEY_LOSS_METHOD, KEY_LEARNING_RATE,
                   KEY_EPOCHS, KEY_OPTIMIZER_TYPE, KEY_INFRA_TYPE]
    fields_list_strs = ['KEY_MODEL_TYPE', 'KEY_LAYER_SIZES_LIST',
                   'KEY_LAYER_TYPES_LIST', 'KEY_LAYERS_FUNCTIONS',
                   'KEY_LOSS_METHOD', 'KEY_LEARNING_RATE',
                   'KEY_EPOCHS', 'KEY_OPTIMIZER_TYPE', 'KEY_INFRA_TYPE']
    fields_list_strs = [f'WORKER_{x}' for x in fields_list_strs]

    fields_list_defs = [ Definition(fields_list_strs[idx], f'{Definition.assert_not_atom(fields_list_vals[idx])}') for idx in range(len(fields_list_vals))]
    [gen_erlang_exporter_logger(x.generate_code()) for x in fields_list_defs]
    

    path_validator(header_path)

    with open(header_path, 'w') as f:
       f.write(auto_generated_header.generate_code())
       f.write(nerlplanner_version.generate_code())
       f.write(EMPTY_LINE)
       [f.write(x.generate_code()) for x in fields_list_defs]

def gen_dc_fields_hrl(header_path : str, debug : bool = False):
    global DEBUG
    DEBUG = debug

    auto_generated_header = AutoGeneratedHeader()
    gen_erlang_exporter_logger(auto_generated_header.generate_code())

    nerlplanner_version = Comment(f'DC Fields Generated by Nerlplanner version: {NERLPLANNER_VERSION}')
    gen_erlang_exporter_logger(nerlplanner_version.generate_code())

    fields_list_vals_atoms = [KEY_NERLNET_SETTINGS, KEY_FREQUENCY, KEY_BATCH_SIZE,
                        KEY_DEVICES, KEY_CLIENTS, KEY_WORKERS, KEY_MODEL_SHA,
                        KEY_SOURCES, KEY_ROUTERS, NAME_FIELD, WORKER_MODEL_SHA_FIELD,
                        IPV4_FIELD, PORT_FIELD, ARGS_FIELD, ENTITIES_FIELD,
                        POLICY_FIELD, EPOCHS_FIELD, TYPE_FIELD, FREQUENCY_FIELD,
                        WORKERS_FIELD]
    fields_list_vals_strs = [f'"{x}"' for x in fields_list_vals_atoms]
    fields_list_strs = ['KEY_NERLNET_SETTINGS', 'KEY_FREQUENCY', 'KEY_BATCH_SIZE',
                        'KEY_DEVICES', 'KEY_CLIENTS', 'KEY_WORKERS', 'KEY_MODEL_SHA',
                        'KEY_SOURCES', 'KEY_ROUTERS', 'NAME_FIELD', 'WORKER_MODEL_SHA_FIELD',
                        'IPV4_FIELD', 'PORT_FIELD', 'ARGS_FIELD', 'ENTITIES_FIELD',
                        'POLICY_FIELD', 'EPOCHS_FIELD', 'TYPE_FIELD', 'FREQUENCY_FIELD',
                        'WORKERS_FIELD']
    fields_list_strs_atom = [f'DC_{x}_ATOM' for x in fields_list_strs]
    fields_list_strs_string = [f'DC_{x}_STR' for x in fields_list_strs]

    fields_list_defs_atoms = [ Definition(fields_list_strs_atom[idx], f'{fields_list_vals_atoms[idx]}') for idx in range(len(fields_list_strs))]
    [gen_erlang_exporter_logger(x.generate_code()) for x in fields_list_defs_atoms]

    fields_list_defs_strings = [ Definition(fields_list_strs_string[idx], f'{fields_list_vals_strs[idx]}') for idx in range(len(fields_list_strs))]
    [gen_erlang_exporter_logger(x.generate_code()) for x in fields_list_defs_strings]

    path_validator(header_path)

    with open(header_path, 'w') as f:
        f.write(auto_generated_header.generate_code())
        f.write(nerlplanner_version.generate_code())
        f.write(EMPTY_LINE)
        [f.write(x.generate_code()) for x in fields_list_defs_atoms]
        f.write(EMPTY_LINE)
        [f.write(x.generate_code()) for x in fields_list_defs_strings]

def main():
    parser = argparse.ArgumentParser(description='Generate C++ header file for nerlPlanner')
    parser.add_argument('-o', '--output', help='output header file path', required=True)
    parser.add_argument('-d', '--debug', help='debug mode', action='store_true')
    parser.add_argument('--gen_worker_fields_hrl', help='debug mode', action='store_true')
    parser.add_argument('--gen_dc_fields_hrl', help='debug mode', action='store_true')

    args = parser.parse_args()
    if args.gen_worker_fields_hrl:
        gen_worker_fields_hrl(args.output, args.debug)
    if args.gen_dc_fields_hrl:
        gen_dc_fields_hrl(args.output, args.debug)

if __name__=="__main__":
    main()

