from collections import OrderedDict

class Comment():
    def __init__(self, comment : str) -> None:
        self.comment = comment

    def generate_code(self):
        return f'// {self.comment}\n'

class AutoGeneratedHeader:
    def __init__(self) -> None:
        pass

    def generate_code(self):
        return f'// This file was auto generated\n'

class PragmaOnce:
    def __init__(self, header_name: str = '') -> None:
        self.header_name = header_name
    
    def generate_code(self):
        return f'#pragma once\n'

class EnumType:
    def __init__(self, enum_name : str, in_ordered_dict : OrderedDict, all_caps : bool = False, prefix = '') -> None:
        self.enum_name = enum_name
        self.ordered_dict = in_ordered_dict
        self.prefix = prefix
        self.all_caps = all_caps

    def generate_code(self):
        code = f'enum {self.enum_name}'+'{'
        for key, value in self.ordered_dict.items():
            key = key.upper() if self.all_caps else key
            last_key = list(self.ordered_dict.keys())[-1].upper() if self.all_caps else list(self.ordered_dict.keys())[-1]
            code += f'{self.prefix}_{key}={value}'
            code += ',' if last_key != key else ''
        return code.replace('-','_') + '};\n'

class Definition:
    def __init__(self, definition, value ) -> None:
        self.definition = definition
        self.value = value
    
    def generate_code(self):
        return f'#define {self.definition} {self.value}\n'
    
class ConstExpression:
    def __init__(self, type, variable, value) -> None:
        self.type = type
        self.variable = variable
        self.value = value
    
    def generate_code(self):
        assert self.type in ['int', 'float', 'double', 'char', 'std::string']
        return f'constexpr {self.type} {self.variable} = {self.value};\n'